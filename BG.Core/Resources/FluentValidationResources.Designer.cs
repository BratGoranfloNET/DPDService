//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BG.Core.Resources {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class FluentValidationResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FluentValidationResources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BG.Core.Resources.FluentValidationResources", typeof(FluentValidationResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The value provided for &apos;{PropertyName}&apos;  is not a valid link..
        /// </summary>
        public static string AbsoluteLinkError {
            get {
                return ResourceManager.GetString("AbsoluteLinkError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не верный или не существует..
        /// </summary>
        public static string BlobIdInvalidError {
            get {
                return ResourceManager.GetString("BlobIdInvalidError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не верный тип файла картинки..
        /// </summary>
        public static string BlobImageMimeTypeError {
            get {
                return ResourceManager.GetString("BlobImageMimeTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; превышен лимит размера файла..
        /// </summary>
        public static string BlobSizeLimitError {
            get {
                return ResourceManager.GetString("BlobSizeLimitError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; необходимы картинки..
        /// </summary>
        public static string CalendarImageEmpty {
            get {
                return ResourceManager.GetString("CalendarImageEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не верный номер кредитной карты..
        /// </summary>
        public static string CreditCardError {
            get {
                return ResourceManager.GetString("CreditCardError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не верный адрес e-mail..
        /// </summary>
        public static string email_error {
            get {
                return ResourceManager.GetString("email_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должен быть не заполненный..
        /// </summary>
        public static string empty_error {
            get {
                return ResourceManager.GetString("empty_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; имеет диапазон значений который не включает &apos;{PropertyValue}&apos;..
        /// </summary>
        public static string enum_error {
            get {
                return ResourceManager.GetString("enum_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должен быть эквивалентен &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string equal_error {
            get {
                return ResourceManager.GetString("equal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должен быть {MaxLength} символов . Вы ввели {TotalLength} символов..
        /// </summary>
        public static string exact_length_error {
            get {
                return ResourceManager.GetString("exact_length_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть между {From} и {To} (exclusive). Вы ввели {Value}..
        /// </summary>
        public static string exclusivebetween_error {
            get {
                return ResourceManager.GetString("exclusivebetween_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть больше, чем &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string greaterthan_error {
            get {
                return ResourceManager.GetString("greaterthan_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть больше или равно &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string greaterthanorequal_error {
            get {
                return ResourceManager.GetString("greaterthanorequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть между {From} и {To}. Вы ввели {Value}..
        /// </summary>
        public static string inclusivebetween_error {
            get {
                return ResourceManager.GetString("inclusivebetween_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть между {MinLength} и {MaxLength} символов. Вы ввели {TotalLength} символов..
        /// </summary>
        public static string length_error {
            get {
                return ResourceManager.GetString("length_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть меньше, чем &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string lessthan_error {
            get {
                return ResourceManager.GetString("lessthan_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть меньше или равно &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string lessthanorequal_error {
            get {
                return ResourceManager.GetString("lessthanorequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно иметь максимальную длину {MaxLength} символов..
        /// </summary>
        public static string MaxLength {
            get {
                return ResourceManager.GetString("MaxLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно иметь как минимум {MinLength} символов..
        /// </summary>
        public static string MinLength {
            get {
                return ResourceManager.GetString("MinLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; необходимо заполнить..
        /// </summary>
        public static string notempty_error {
            get {
                return ResourceManager.GetString("notempty_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не должно быть равно &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string notequal_error {
            get {
                return ResourceManager.GetString("notequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не должно быть пустым..
        /// </summary>
        public static string notnull_error {
            get {
                return ResourceManager.GetString("notnull_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; должно быть пустым..
        /// </summary>
        public static string null_error {
            get {
                return ResourceManager.GetString("null_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Указанное условие не было выполнено для &apos;{PropertyName}&apos;..
        /// </summary>
        public static string predicate_error {
            get {
                return ResourceManager.GetString("predicate_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не корректный формат..
        /// </summary>
        public static string regex_error {
            get {
                return ResourceManager.GetString("regex_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &apos;{PropertyName}&apos; не может быть больше {expectedPrecision} цифр всего, с учетом {expectedScale} десятичных. {digits} цифр и {actualScale} десятичные найдены..
        /// </summary>
        public static string scale_precision_error {
            get {
                return ResourceManager.GetString("scale_precision_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Вы должны согласиться &apos;{PropertyName}&apos; для продолжения..
        /// </summary>
        public static string TermsOfUseAgreement {
            get {
                return ResourceManager.GetString("TermsOfUseAgreement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на  &apos;{PropertyName}&apos; уже используется другим пользователем..
        /// </summary>
        public static string UserUniqueFieldError {
            get {
                return ResourceManager.GetString("UserUniqueFieldError", resourceCulture);
            }
        }
    }
}
